PACKAGE_NAME=mapnik
BASE_DIR="${DEV_BASE_DIR}/mapnik-3.0.22"

SOURCE_RETRIEVAL_METHOD=wget

SOURCE_DIR="${BASE_DIR}"
BUILD_DIR="${BASE_DIR}"
INSTALL_DIR="${BASE_DIR}/install-${ARCH}"

#build info for mapnik
#https://github.com/mapnik/mapnik/wiki/UsingScons
#https://github.com/mapnik/mapnik/blob/master/INSTALL.md
#https://github.com/mapnik/mapnik-packaging/tree/master/windows
#https://github.com/mapnik/mapnik-packaging/blob/master/windows/building_mapnik_dependencies.md

case $PLATFORM in
  Windows)
    #https://github.com/mapbox/windows-builds
    #https://github.com/mapnik/mapnik-gyp
    SOURCE_FORMAT=bz2
    SOURCE_URL=https://github.com/mapnik/mapnik/releases/download/v3.0.22/mapnik-v3.0.22.tar.bz2

    MAPNIK_GYP="${SOURCE_DIR}/mapnik-gyp-${ARCH}"
    BUILD="${MAPNIK_GYP}/build"
    GYP="${MAPNIK_GYP}/gyp"
    MAPNIK_SDK="${MAPNIK_GYP}/mapnik-sdk"

    PREBUILD_METHOD=custom
    CUSTOM_PREBUILD+=( "cd ${SOURCE_DIR}" )
    # gyp
    CUSTOM_PREBUILD+=( "if [ ! -d ${MAPNIK_GYP} ]; then git clone https://github.com/mapnik/mapnik-gyp.git ${MAPNIK_GYP} && cd ${MAPNIK_GYP}; else cd ${MAPNIK_GYP} && git checkout -- . && git pull; fi" )
    CUSTOM_PREBUILD+=( "if [ ! -d ${GYP} ]; then git clone https://chromium.googlesource.com/external/gyp.git ${GYP}; else cd ${GYP} && git checkout -- . && git pull && cd ${MAPNIK_GYP}; fi" )
    # fix
    CUSTOM_PREBUILD+=( "find ${SOURCE_DIR}/include/mapnik -type f -name \"*.hpp\" -exec sed -i 's/__cpp_inheriting_constructors/__junk_inheriting_constructors/g' {} \;" )
    # copy
    CUSTOM_PREBUILD+=( "mkdir -p ${MAPNIK_SDK}/include/mapnik" )
    CUSTOM_PREBUILD+=( "cp -R ${SOURCE_DIR}/include/mapnik/version.hpp ${MAPNIK_SDK}/include/mapnik" )
    CUSTOM_PREBUILD+=( "cp -R ${harfbuzz_INSTALL_DIR}/include/. ${MAPNIK_SDK}/include" )
    CUSTOM_PREBUILD+=( "cp -R ${harfbuzz_INSTALL_DIR}/lib/. ${MAPNIK_SDK}/lib" )
    CUSTOM_PREBUILD+=( "cp -R ${BOOST_INSTALL_DIR}/include/${BOOST_VERSION_DIR}/. ${MAPNIK_SDK}/include" )
    CUSTOM_PREBUILD+=( "cp -R ${BOOST_INSTALL_DIR}/lib/. ${MAPNIK_SDK}/lib" )
    CUSTOM_PREBUILD+=( "cp -R ${ICU_INSTALL_DIR}/include/. ${MAPNIK_SDK}/include" )
    CUSTOM_PREBUILD+=( "cp -R ${ICU_INSTALL_DIR}/lib/. ${MAPNIK_SDK}/lib" )
    CUSTOM_PREBUILD+=( "cp -R ${freetype_INSTALL_DIR}/include/. ${MAPNIK_SDK}/include" )
    CUSTOM_PREBUILD+=( "cp -R ${freetype_INSTALL_DIR}/lib/. ${MAPNIK_SDK}/lib" )
    CUSTOM_PREBUILD+=( "cp -R ${gdal_INSTALL_DIR}/include/. ${MAPNIK_SDK}/include" )
    CUSTOM_PREBUILD+=( "cp -R ${gdal_INSTALL_DIR}/lib/. ${MAPNIK_SDK}/lib" )
    #CUSTOM_PREBUILD+=( "cp -R ${libxml2_INSTALL_DIR}/include/. ${MAPNIK_SDK}/include" )
    #CUSTOM_PREBUILD+=( "cp -R ${libxml2_INSTALL_DIR}/lib/. ${MAPNIK_SDK}/lib" )
    CUSTOM_PREBUILD+=( "cp -R ${ZLIB_INSTALL_DIR}/include/. ${MAPNIK_SDK}/include" )
    CUSTOM_PREBUILD+=( "cp -R ${ZLIB_INSTALL_DIR}/lib/. ${MAPNIK_SDK}/lib" )
    CUSTOM_PREBUILD+=( "cp -R ${PNG_INSTALL_DIR}/include/. ${MAPNIK_SDK}/include" )
    CUSTOM_PREBUILD+=( "cp -R ${PNG_INSTALL_DIR}/lib/. ${MAPNIK_SDK}/lib" )
    CUSTOM_PREBUILD+=( "cp -R ${jpeg_INSTALL_DIR}/include/. ${MAPNIK_SDK}/include" )
    CUSTOM_PREBUILD+=( "cp -R ${jpeg_INSTALL_DIR}/lib/. ${MAPNIK_SDK}/lib" )
    CUSTOM_PREBUILD+=( "cp -R ${webp_INSTALL_DIR}/include/. ${MAPNIK_SDK}/include" )
    CUSTOM_PREBUILD+=( "cp -R ${webp_INSTALL_DIR}/lib/. ${MAPNIK_SDK}/lib" )
    CUSTOM_PREBUILD+=( "cp -R ${proj_INSTALL_DIR}/include/. ${MAPNIK_SDK}/include" )
    CUSTOM_PREBUILD+=( "cp -R ${proj_INSTALL_DIR}/lib/. ${MAPNIK_SDK}/lib" )
    CUSTOM_PREBUILD+=( "cp -R ${sqlite_INSTALL_DIR}/include/. ${MAPNIK_SDK}/include" )
    CUSTOM_PREBUILD+=( "cp -R ${sqlite_INSTALL_DIR}/lib/. ${MAPNIK_SDK}/lib" )
    CUSTOM_PREBUILD+=( "cp -R ${tiff_INSTALL_DIR}/include/. ${MAPNIK_SDK}/include" )
    CUSTOM_PREBUILD+=( "cp -R ${tiff_INSTALL_DIR}/lib/. ${MAPNIK_SDK}/lib" )
    CUSTOM_PREBUILD+=( "cp -R ${cairo_INSTALL_DIR}/include/. ${MAPNIK_SDK}/include" )
    CUSTOM_PREBUILD+=( "cp -R ${cairo_INSTALL_DIR}/lib/. ${MAPNIK_SDK}/lib" )
    # fix
    CUSTOM_PREBUILD+=( "sed -i '/\"boost_toolset\":/d' ${MAPNIK_GYP}/mapnik.gyp" )
    CUSTOM_PREBUILD+=( "sed -i '/\"libexpat\.lib\"/d' ${MAPNIK_GYP}/mapnik.gyp" )
    CUSTOM_PREBUILD+=( "sed -i 's/lib\(boost_.*-mt-\)</\1<(boost_arch)-</g' ${MAPNIK_GYP}/mapnik.gyp" ) # dynamic linking and arch fix
    CUSTOM_PREBUILD+=( "sed -i 's/\(\"webp_lib\":\"\)libwebp_dll\.lib/\1webp\.lib/g' ${MAPNIK_GYP}/mapnik.gyp" ) # static linking
    CUSTOM_PREBUILD+=( "sed -i 's/\(libpng16\)\(\.lib\)/\1_static\2/g' ${MAPNIK_GYP}/mapnik.gyp" ) # static linking
    CUSTOM_PREBUILD+=( "sed -i 's/\(proj\)\(\.lib\)/\1_6_2\2/g' ${MAPNIK_GYP}/mapnik.gyp" ) # support proj6
    CUSTOM_PREBUILD+=( "sed -i 's/^\(\(\s\+\).*MAPNIK_USE_PROJ4.*\)$/\1\n\2\"ACCEPT_USE_OF_DEPRECATED_PROJ_API_H\",/' ${MAPNIK_GYP}/mapnik.gyp" )
    CUSTOM_PREBUILD+=( "sed -i 's/^\(\(\s\+\).*proj.*\.lib.*\)$/\1\n\2\"sqlite3.lib\",/' ${MAPNIK_GYP}/mapnik.gyp" )
    CUSTOM_PREBUILD+=( "sed -i 's/\(libtiff\)_i\(\.lib\)/\1\2/g' ${MAPNIK_GYP}/mapnik.gyp" ) # static linking
    CUSTOM_PREBUILD+=( "sed -i 's/\(zlib\)\(\.lib\)/\1static\2/g' ${MAPNIK_GYP}/mapnik.gyp" ) # static linking
    #CUSTOM_PREBUILD+=( "sed -i 's/\(cairo\)\(\.lib\)/\1-static\2/g' ${MAPNIK_GYP}/mapnik.gyp" ) # static linking
    #CUSTOM_PREBUILD+=( "sed -i 's/\(\"HAVE_CAIRO\",\)$/\1\"CAIRO_WIN32_STATIC_BUILD\",/g' ${MAPNIK_GYP}/mapnik.gyp" ) # static linking preprocessor define
    CUSTOM_PREBUILD+=( "sed -i 's/v140/${BOOST_TOOLSET//[\\.msc-]/}/g' common.gypi" )
    # generate
    CUSTOM_PREBUILD+=( "cmd /c set \"PATH=%PYTHONPATH%;%PATH%;\" \&\& call gyp/gyp.bat mapnik.gyp --depth=. --debug=all -Dincludes=${MAPNIK_SDK}/include -Dlibs=${MAPNIK_SDK}/lib -Dconfiguration=${MSVC_CONFIG} -Dplatform=${MSVC_PLATFORM} -Dboost_toolset=${BOOST_TOOLSET//[\\.ms-]/} -Dboost_arch=${BOOST_ARCH} -Dboost_version=${BOOST_VERSION} -f msvs -G msvs_version=${VS_YEAR} -f gypd -DOS=win --generator-output=build" )

    BUILD_METHOD=devenv
    MSVC_CONFIG="${BUILD_TYPE}"
    if [ ${ARCH} = "32-bit" ]; then
      MSVC_PLATFORM=Win32
    else
      MSVC_PLATFORM=x64
    fi
    MSVC_SOLUTION="${BUILD}/mapnik.sln"
    MSVC_PROJECT+=( "mapnik.vcxproj" )
    MSVC_PROJECT+=( "csv.vcxproj" )
    MSVC_PROJECT+=( "gdal.vcxproj" )
    MSVC_PROJECT+=( "geojson.vcxproj" )
    MSVC_PROJECT+=( "raster.vcxproj" )
    MSVC_PROJECT+=( "shape.vcxproj" )

    POST_BUILD_METHOD+=( "cd ${MAPNIK_GYP}" )
    POST_BUILD_METHOD+=( "cmd /c set TOOLS_VERSION= \&\& powershell -ExecutionPolicy ByPass -File mapnik-config-create.ps1" )
    POST_BUILD_METHOD+=( "mkdir -p ${INSTALL_DIR}/include/mapnik" )
    POST_BUILD_METHOD+=( "cp -R ${SOURCE_DIR}/deps/mapbox/variant/include/. ${INSTALL_DIR}/include" )
    POST_BUILD_METHOD+=( "cp -R ${SOURCE_DIR}/deps/mapnik/sparsehash ${INSTALL_DIR}/include/mapnik/." )
    POST_BUILD_METHOD+=( "cp -R -T ${SOURCE_DIR}/deps/agg/include ${INSTALL_DIR}/include/mapnik/agg" )
    POST_BUILD_METHOD+=( "cp -R ${SOURCE_DIR}/include/mapnik ${INSTALL_DIR}/include/." )
    POST_BUILD_METHOD+=( "mkdir -p ${INSTALL_DIR}/bin" )
    POST_BUILD_METHOD+=( "mkdir -p ${INSTALL_DIR}/lib/mapnik/fonts" )
    POST_BUILD_METHOD+=( "mkdir -p ${INSTALL_DIR}/lib/mapnik/input" )
    POST_BUILD_METHOD+=( "cp ${BUILD}/lib/*.dll ${INSTALL_DIR}/bin" )
    POST_BUILD_METHOD+=( "cp ${BUILD}/lib/mapnik/input/*.input ${INSTALL_DIR}/lib/mapnik/input" )
    POST_BUILD_METHOD+=( "cp ${MAPNIK_GYP}/mapnik-config.bat ${INSTALL_DIR}/bin" )
    POST_BUILD_METHOD+=( "cp -R ${BUILD}/${BUILD_TYPE}/*.lib ${INSTALL_DIR}/lib" )
    POST_BUILD_METHOD+=( "find ${SOURCE_DIR}/fonts -type f -name '*.ttf' -exec cp {} ${INSTALL_DIR}/lib/mapnik/fonts \;" )
    ;;
  Darwin)
    INSTALL_DIR="${BASE_DIR}/install-${ARCH}"
    SOURCE_URL=http://mapnik.s3.amazonaws.com/dist/v2.2.0/mapnik-v2.2.0.tar.bz2
    SOURCE_FORMAT=tgz
    export PKG_CONFIG_PATH=${PNG_INSTALL_DIR}/lib/pkgconfig:${pixman_INSTALL_DIR}/lib/pkgconfig:${cairo_INSTALL_DIR}/lib/pkgconfig
    export PKG_CONFIG_PATH=${PKG_CONFIG_PATH}:${proj_INSTALL_DIR}/lib/pkgconfig:${ICU_INSTALL_DIR}/lib/pkgconfig:${freetype_INSTALL_DIR}/lib/pkgconfig
    SKIP_PREBUILD=yes
    BUILD_METHOD=scons
    SCONS_PARAMS+=( PREFIX="${INSTALL_DIR}" )
    SCONS_PARAMS+=( PROJ_INCLUDES="${proj_INSTALL_DIR}/include" )
    SCONS_PARAMS+=( PROJ_LIBS="${proj_INSTALL_DIR}/lib" )
    SCONS_PARAMS+=( ICU_INCLUDES="${ICU_INSTALL_DIR}/include" )
    SCONS_PARAMS+=( ICU_LIBS="${ICU_INSTALL_DIR}/lib" )
    SCONS_PARAMS+=( PNG_INCLUDES="${PNG_INSTALL_DIR}/include" )
    SCONS_PARAMS+=( PNG_LIBS="${PNG_INSTALL_DIR}/lib" )
    SCONS_PARAMS+=( GDAL_CONFIG="${gdal_INSTALL_DIR}/bin/gdal-config" )
    SCONS_PARAMS+=( TIFF_INCLUDES="${tiff_INSTALL_DIR}/include" )
    SCONS_PARAMS+=( TIFF_LIBS="${tiff_INSTALL_DIR}/lib" )
    SCONS_PARAMS+=( JPEG=no )
    SCONS_PARAMS+=( ICU_LIB_NAME=icuuc )
    SCONS_PARAMS+=( BOOST_INCLUDES="${BOOST_INSTALL_DIR}/include" )
    SCONS_PARAMS+=( BOOST_LIBS="${BOOST_INSTALL_DIR}/lib" )
    SCONS_PARAMS+=( DEMO=False )
    SCONS_PARAMS+=( CPP_TESTS=False )
    SCONS_PARAMS+=( FRAMEWORK_PYTHON=False )
    SCONS_PARAMS+=( BINDINGS=none )
    #SCONS_PARAMS+=( USE_CONFIG=False )
    SCONS_PARAMS+=( FREETYPE_CONFIG="${freetype_INSTALL_DIR}/bin/freetype-config" )
    #SCONS_PARAMS+=( --config=force )
    #THREADING=multi
    SCONS_PARAMS+=( CUSTOM_CXXFLAGS="-std=c++11 -stdlib=libc++" )
    SCONS_PARAMS+=( CUSTOM_LDFLAGS="-stdlib=libc++" )
    ;;
  Linux)
    INSTALL_DIR="${BASE_DIR}/install-${ARCH}"
    export PKG_CONFIG_PATH=${PNG_INSTALL_DIR}/lib/pkgconfig:${pixman_INSTALL_DIR}/lib/pkgconfig:${cairo_INSTALL_DIR}/lib/pkgconfig
    export PKG_CONFIG_PATH=${PKG_CONFIG_PATH}:${proj_INSTALL_DIR}/lib/pkgconfig:${ICU_INSTALL_DIR}/lib/pkgconfig:${freetype_INSTALL_DIR}/lib/pkgconfig
    SOURCE_URL=http://mapnik.s3.amazonaws.com/dist/v2.2.0/mapnik-v2.2.0.tar.bz2
    SOURCE_FORMAT=tgz
    SKIP_PREBUILD=yes
    BUILD_METHOD=scons
    SCONS_PARAMS+=( PREFIX="${INSTALL_DIR}" )
    SCONS_PARAMS+=( PROJ_INCLUDES="${proj_INSTALL_DIR}/include" )
    SCONS_PARAMS+=( PROJ_LIBS="${proj_INSTALL_DIR}/lib" )
    SCONS_PARAMS+=( ICU_INCLUDES="${ICU_INSTALL_DIR}/include" )
    SCONS_PARAMS+=( ICU_LIBS="${ICU_INSTALL_DIR}/lib" )
    SCONS_PARAMS+=( PNG_INCLUDES="${PNG_INSTALL_DIR}/include" )
    SCONS_PARAMS+=( PNG_LIBS="${PNG_INSTALL_DIR}/lib" )
    SCONS_PARAMS+=( GDAL_CONFIG="${gdal_INSTALL_DIR}/bin/gdal-config" )
    SCONS_PARAMS+=( TIFF=no )
    SCONS_PARAMS+=( JPEG=no )
    SCONS_PARAMS+=( BOOST_INCLUDES="${BOOST_INSTALL_DIR}/include" )
    SCONS_PARAMS+=( BOOST_LIBS="${BOOST_INSTALL_DIR}/lib" )
    ;;
esac
